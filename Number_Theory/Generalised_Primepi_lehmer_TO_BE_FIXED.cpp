#include <bits/stdc++.h>
using namespace std;
// n = 100000 : 9592(time: 5.3e-05s)
// n = 1e+06 : 78498(time: 4e-06s)
// n = 1e+07 : 664579(time: 3e-06s)
// n = 1e+08 : 5761455(time: 0.000126s)
// n = 1e+09 : 50847534(time: 0.0006s)
// n = 1e+10 : 455052511(time: 0.00434s)
// n = 1e+11 : 4118054813(time: 0.058318s)
// n = 1e+12 : 37607912018(time: 0.53861s)
// n = 1e+13 : 346065536839(time: 6.10802s)const int N = 3e5 + 9;
using ll = long long;

namespace pcf {
// initialize once by calling init()
#define MAXN 20000010      // initial sieve limit
#define MAX_PRIMES 2000010 // max size of the prime array for sieve
#define PHI_N 100000
#define PHI_M 100

int len = 0; // total number of primes generated by sieve
int primes[MAX_PRIMES];
int sumprimes[MAX_PRIMES];
ll pref0[MAXN];      // pref[i] --> number of primes <= i
ll pref[MAXN];       // pref[i] --> number of primes <= i
ll dp[PHI_N][PHI_M]; // precal of yo(n,k)
bitset<MAXN> f;

inline long long func(int p, int k) {
  if (k == 0)
    return 1;
  else if (k == 1)
    return p;
  else
    cout << "WTF";
}

inline long long accfunc(long long n, int k) {
  if (k == 0)
    return n;
  else if (k == 1)
    return n * (n + 1) / 2;
  else
    cout << "WTF";
}

void sieve(int n, int k) {
  f[1] = true;
  for (int i = 4; i <= n; i += 2)
    f[i] = true;
  for (int i = 3; i * i <= n; i += 2) {
    if (!f[i]) {
      for (int j = i * i; j <= n; j += i << 1)
        f[j] = 1;
    }
  }
  pref0[0] = 0;
  pref[0] = 0;
  sumprimes[0] = 2;
  for (int i = 1; i <= n; i++) {
    if (!f[i]) {
      primes[len++] = i;
      sumprimes[len - 1] = len > 1 ? sumprimes[len - 2] + i : i;
      pref0[i] = pref0[i - 1] + 1;
      pref[i] = pref[i - 1] + func(i, k); // len;
    } else {
      pref0[i] = pref0[i - 1];
      pref[i] = pref[i - 1];
    }
  }
}

void init(int k) {
  sieve(MAXN - 1, k);
  // precalculation of phi upto size (PHI_N,PHI_M)
  for (int n = 0; n < PHI_N; n++)
    dp[n][0] = accfunc(n, k);
  for (int m = 1; m < PHI_M; m++) {
    for (int n = 0; n < PHI_N; n++) {
      dp[n][m] =
          dp[n][m - 1] - dp[n / primes[m - 1]][m - 1] * func(primes[m - 1], k);
    }
  }
  for (int i = 0; i < 6; i++) {
    cout << endl;
    for (int j = 0; j < 6; j++)
      cout << dp[i][j] << " ";
  }
  cout << endl;
}
// returns the number of integers less or equal n which are
// not divisible by any of the first k primes
// recurrence --> yo(n, k) = yo(n, k-1) - yo(n / p_k , k-1)
// for sum of primes yo(n, k) = yo(n, k-1) - p_k * yo(n / p_k , k-1)
long long Lehmer0(long long n) {
  if (n < MAXN)
    return pref0[n];
}

long long yo(long long n, int m, int k) {
  if (n < PHI_N && m < PHI_M) {
    return dp[n][m];
  }
  if (m == 1) {
    ++n;
    return accfunc(n >> 1, k);
  }
  if (primes[m - 1] >= n) {
    return 1; //*func(n);
  }
  return yo(n, m - 1, k) -
         yo(n / primes[m - 1], m - 1, k) * func(primes[m - 1], k);
}
// complexity: n^(2/3).(log n^(1/3))
// long long Legendre(long long n) {
//   if (n < MAXN)
//     return pref[n];
//   int lim = sqrt(n) + 1;
//   int k = upper_bound(primes, primes + len, lim) - primes;
//   return yo(n, k) + (k - 1);
// }
// runs under 0.2s for n = 1e12

template <class T> void debug(std::initializer_list<T> list) {
  // #ifndef ONLINE_JUDGE
  for (auto elem : list)
    cout << elem << " ";
  cout << endl;
  // #endif
}

long long Lehmer(long long n, int k);

ll P2(ll n, int a, int b, int c, int k) {
  ll p2 = 0;
  for (int i = a; i < b; i++) {
    ll w = n / primes[i];
    p2 += Lehmer(w, k) * func(primes[i], k);
  }

  if (k == 0) {
    p2 -= ((1LL * (b + a - 2) * (b - a + 1)) >> 1);
  } else if (k == 1) {
    p2 += Lehmer(b, k) - a;
    for (int i = a; i < b; i++) {
      p2 -= Lehmer(primes[i], k) * func(primes[i], k);
    }
  } else {
    cout << "WTF";
  }
  return p2;
}

ll P3(ll n, int a, int b, int c, int k) {
  ll p3 = 0;
  for (int i = a; i < b; i++) {
    ll w = n / primes[i];
    int lim = Lehmer(sqrt(w), k);
    if (i <= c) {
      for (int j = i; j < lim; j++) {
        p3 += (Lehmer(w / primes[j], k) - accfunc(j - 1, k)) *
              func(primes[i], k) * func(primes[j], k);
      }
    }
  }
  return p3;
}

long long Lehmer(long long n, int k) {
  if (n < 2)
    return pref[n];
  long long res = 0;
  int t = sqrt(n);
  int a = Lehmer0(sqrt(t)), c = Lehmer0(cbrt(n)), b = Lehmer0(t);
  ll phi = yo(n, a, k);
  ll p2 = P2(n, a, b, c, k);
  ll p3 = P3(n, a, b, c, k);
  res = phi - p2 - p3;
  debug({string("A"), to_string(n), to_string(a), to_string(c), to_string(b)});
  debug({string("B"), to_string(n), to_string(phi), to_string(p2),
         to_string(p3)});
  return res;
}
} // namespace pcf

int32_t main() {
  // vector<ll> ns = {(ll)1e4,  (ll)1e5,  (ll)1e6,  (ll)1e7,  (ll)1e8,  (ll)1e9,
  //                  (ll)1e10, (ll)1e11, (ll)1e12, (ll)1e13, 100,      1000,
  //                  10000,    99999,    100000,   (ll)1e11, (ll)1e12,
  //                  (ll)1e13};
  int k = 0;
  pcf::init(k);
  for (ll n = 1; n <= 10; n++) {
    // for (ll n : ns) {
    auto start_time = clock();
    ll res = pcf::Lehmer(n, k);
    cout << "n = " << (double)n << " : " << res
         << "(time: " << (double)(clock() - start_time) / CLOCKS_PER_SEC << "s)"
         << endl
         << "======" << endl;
  }
  return 0;
}
